{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lowercase from '@stdlib/string-lowercase' ;\nimport replace from '@stdlib/string-replace' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// VARIABLES //\n\nvar RE_NON_ALPHANUMERIC = /[^a-z0-9]/g;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function for sorting characters in ascending order.\n*\n* @private\n* @param {string} a - character\n* @param {string} b - character\n* @returns {number} comparison value\n*/\nfunction ascending( a, b ) {\n\tif ( a < b ) {\n\t\treturn -1;\n\t}\n\tif ( a === b ) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\n// MAIN //\n\n/**\n* Tests if a value is an anagram.\n*\n* @param {string} str - comparison string\n* @param {*} x - value to test\n* @throws {TypeError} first argument must be a string\n* @returns {boolean} boolean indicating if a value is an anagram\n*\n* @example\n* var bool = isAnagram( 'I am a weakish speller', 'William Shakespeare' );\n* // returns true\n*\n* @example\n* var bool = isAnagram( 'bat', 'tabba' );\n* // returns false\n*/\nfunction isAnagram( str, x ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0253R', str ) );\n\t}\n\tif ( !isString( x ) ) {\n\t\treturn false;\n\t}\n\tstr = lowercase( str );\n\tstr = replace( str, RE_NON_ALPHANUMERIC, '' );\n\tx = lowercase( x );\n\tx = replace( x, RE_NON_ALPHANUMERIC, '' );\n\tif ( str.length !== x.length ) {\n\t\treturn false;\n\t}\n\tstr = str.split( '' )\n\t\t.sort( ascending )\n\t\t.join( '' );\n\tx = x.split( '' )\n\t\t.sort( ascending )\n\t\t.join( '' );\n\treturn ( str === x );\n}\n\n\n// EXPORTS //\n\nexport default isAnagram;\n"],"names":["RE_NON_ALPHANUMERIC","ascending","a","b","isAnagram","str","x","isString","TypeError","format","lowercase","replace","length","split","sort","join"],"mappings":";;0WA8BA,IAAIA,EAAsB,aAa1B,SAASC,EAAWC,EAAGC,GACtB,OAAKD,EAAIC,GACA,EAEJD,IAAMC,EACH,EAED,EAsBR,SAASC,EAAWC,EAAKC,GACxB,IAAMC,EAAUF,GACf,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,IAEvC,QAAME,EAAUD,KAGhBD,EAAMK,EAAWL,GACjBA,EAAMM,EAASN,EAAKL,EAAqB,IACzCM,EAAII,EAAWJ,GACfA,EAAIK,EAASL,EAAGN,EAAqB,IAChCK,EAAIO,SAAWN,EAAEM,SAGtBP,EAAMA,EAAIQ,MAAO,IACfC,KAAMb,GACNc,KAAM,QACRT,EAAIA,EAAEO,MAAO,IACXC,KAAMb,GACNc,KAAM"}